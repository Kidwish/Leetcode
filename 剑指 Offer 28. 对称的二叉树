# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

import copy

class Solution:
    def mirrorTree(self, root: TreeNode) -> TreeNode:
        if root==None:
            return root
        if root.left!=None or root.right!=None:
            root.left,root.right = root.right,root.left
        if root.left!=None:
            Solution.mirrorTree(self,root.left)
        if root.right!=None:
            Solution.mirrorTree(self,root.right)
        return root

    def isEqual(self, root: TreeNode, rootm: TreeNode) -> bool:
        if root == None or rootm == None:
            if root == None and rootm == None:
                return True
            else:
                return False
        if root.val == rootm.val:
            if Solution.isEqual(self,root.left,rootm.left) and Solution.isEqual(self,root.right,rootm.right):
                return True
        return False

    def isSymmetric(self, root: TreeNode) -> bool:
        rootm=copy.deepcopy(root)
        rootm=Solution.mirrorTree(self,rootm)
        if Solution.isEqual(self,root,rootm):
            return True
        else:
            return False
